aws_profile: spark #수정 필요
app: demo-lambda-test
region: ap-northeast-2
env:
  key: test_value
  key2: test_value2
claimsProfiles:
  test1:
    email: email@sample.com
  test2:
    email: email2@sample.com
test_targets:
  - uri: s3/get.js
    eventType: http
    description: bucket list output
    method: get
    parms:
      email: spark@rubywave.io
      company_name: reconlabs
      type: test
    expect:
      checkType: check_200
  - uri: http/get.js
    eventType: http
    description: simple echo
    method: get
    parms:
      email: spark@rubywave.io
      companyName: reconlabs
      type: test
    expect:
      checkType: check_200
# 필수 파라메터인 companyName이 없으니 fail
  - uri: http/get.js
    eventType: http
    description: simple echo - 실패해야 정상
    method: get
    parms:
      email: spark@rubywave.io
      type: test
    expect:
      checkType: check_200
# expect case, 반환 값이 {data:{t1 : 1,t2: 2}} 형식인지 확인
  - uri: test/get.js
    eventType: http
    description: http 반환 값 테스트
    method: get
    parms:
      input1: 1
      input2: 2
    expect:
      checkType: check_value
      target:
        data:
          input1: 1
          input2: 2
# fail case, 반환 값중 data.t2가 3으로 예상하지만 실제로는 2를 반환하기에 실패
  - uri: test/get.js
    eventType: http
    description: http 반환 값 테스트(2)-실패해야 정상
    method: get
    parms:
      input1: 1
      input2: 2
    expect:
      checkType: check_value
      target:
        data:
          input1: 1
          input2: 3
# not fail case, 반환 값중 data.t2가 3으로 예상하지만 실제로는 2를 반환해도 not이 활성화 되어있어서 성공
  - uri: test/get.js
    eventType: http
    description: not 테스트
    method: get
    parms:
      input1: 1
      input2: 2
    expect:
      not: true
      checkType: check_value
      target:
        data:
          input1: 1
          input2: 3
# not case, 즉 status code가 200이 아니어야 한다.(input1,input2가 required이나 제공되지 않음)
  - uri: test/get.js
    eventType: http
    description: not 200 test
    method: get
    parms:
      fail: true
    expect:
      not: true
      checkType: check_200
# 결과 값 저장: 결과 값의 data.input1 경로의 값을 "bb" 로 저장, 이후 @bb로 사용 가능
  - uri: test/get.js
    eventType: http
    description: save output value 
    method: get
    parms:
      input1: 1
      input2: 2
    expect:
      checkType: check_200
    saveValue:
      - path: data.input1
        saveas: bb
#이전 테스트에서 저장한 값 "bb"를 parm에 test 에 해당하는 값으로 넣기(@bb)
  - uri: test/get.js
    eventType: http
    description: input previously saved value
    method: get
    parms:
      input1: "@bb"
      input2: 2
    expect:
      checkType: check_200
      target:
        data:
          input1: 1
          input2: 2

#맨 처음에 지정한 claimsProfile중 test1을 사용
  - uri: test/get.js
    eventType: http
    description: test profile
    method: get
    parms:
      input1: 1
      input2: 2
    claimsProfile: test1
    expect:
      checkType: check_200
